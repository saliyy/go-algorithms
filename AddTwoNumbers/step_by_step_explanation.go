package main

import "fmt"

type ListNode struct {
	Val  int
	Next *ListNode
}

func printMemoryState(dummyHead, curr *ListNode, step string) {
	fmt.Printf("\n=== %s ===\n", step)
	fmt.Printf("dummyHead —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞: %p\n", dummyHead)
	fmt.Printf("curr —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞: %p\n", curr)

	fmt.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –æ—Ç dummyHead:\n")
	node := dummyHead
	position := 0
	for node != nil {
		marker := ""
		if node == curr {
			marker = " <-- curr –∑–¥–µ—Å—å"
		}
		if node == dummyHead {
			marker += " <-- dummyHead –∑–¥–µ—Å—å"
		}
		fmt.Printf("  –ü–æ–∑–∏—Ü–∏—è %d: –∞–¥—Ä–µ—Å %p, –∑–Ω–∞—á–µ–Ω–∏–µ %d%s\n", position, node, node.Val, marker)
		node = node.Next
		position++
		if position > 10 { // –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
			break
		}
	}
}

func addTwoNumbersStepByStep(l1 *ListNode, l2 *ListNode) *ListNode {
	// –®–ê–ì 0: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	dummyHead := &ListNode{Val: 0}
	curr := dummyHead
	printMemoryState(dummyHead, curr, "–®–ê–ì 0: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

	carry := 0
	iteration := 1

	for l1 != nil || l2 != nil || carry != 0 {
		x := 0
		if l1 != nil {
			x = l1.Val
		}
		y := 0
		if l2 != nil {
			y = l2.Val
		}
		sum := carry + x + y
		carry = sum / 10

		fmt.Printf("\nüî∏ –ò—Ç–µ—Ä–∞—Ü–∏—è %d: —Å–æ–∑–¥–∞—ë–º —É–∑–µ–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º %d\n", iteration, sum%10)

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ 1: –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å
		curr.Next = &ListNode{Val: sum % 10}
		fmt.Printf("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏: curr.Next = &ListNode{Val: %d}\n", sum%10)
		fmt.Printf("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: —É–∑–µ–ª –ø–æ –∞–¥—Ä–µ—Å—É %p —Ç–µ–ø–µ—Ä—å —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–π —É–∑–µ–ª %p\n", curr, curr.Next)

		printMemoryState(dummyHead, curr, fmt.Sprintf("–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ %d", iteration))

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ 2: –ü–µ—Ä–µ–º–µ—â–∞–µ–º curr
		fmt.Printf("\nüî∏ –ü–µ—Ä–µ–º–µ—â–∞–µ–º curr –Ω–∞ –Ω–æ–≤—ã–π —É–∑–µ–ª\n")
		fmt.Printf("   –ë–´–õ–û: curr = %p\n", curr)
		curr = curr.Next
		fmt.Printf("   –°–¢–ê–õ–û: curr = %p\n", curr)
		fmt.Printf("   ‚ö†Ô∏è  –í–ê–ñ–ù–û: dummyHead –æ—Å—Ç–∞–ª—Å—è –Ω–∞ %p –∏ –í–°–Å –ï–©–Å –ú–û–ñ–ï–¢ –î–û–ô–¢–ò –¥–æ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞ –ø–æ —Ü–µ–ø–æ—á–∫–µ!\n", dummyHead)

		printMemoryState(dummyHead, curr, fmt.Sprintf("–ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è curr –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ %d", iteration))

		if l1 != nil {
			l1 = l1.Next
		}
		if l2 != nil {
			l2 = l2.Next
		}

		iteration++
	}

	fmt.Printf("\nüèÅ –§–ò–ù–ê–õ:\n")
	fmt.Printf("dummyHead –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞: %p\n", dummyHead)
	fmt.Printf("curr –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞: %p\n", curr)
	fmt.Printf("dummyHead.Next (–Ω–∞—á–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞): %p\n", dummyHead.Next)
	fmt.Printf("\nüí° dummyHead –º–æ–∂–µ—Ç –¥–æ–π—Ç–∏ –¥–æ curr —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É Next!\n")

	return dummyHead.Next
}

func main() {
	// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: 5 + 5 = 10 (0 —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º 1)
	l1 := &ListNode{Val: 5}
	l2 := &ListNode{Val: 5}

	result := addTwoNumbersStepByStep(l1, l2)

	fmt.Printf("\n=== –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===\n")
	fmt.Print("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫: ")
	for result != nil {
		fmt.Printf("%d ", result.Val)
		result = result.Next
	}
	fmt.Println()
}
