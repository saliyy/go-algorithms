package main

import "fmt"

type ListNode struct {
	Val  int
	Next *ListNode
}

func demonstratePointerVsValue() {
	// –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É —É–∑–ª–æ–≤
	node1 := &ListNode{Val: 1}
	node2 := &ListNode{Val: 2}
	node3 := &ListNode{Val: 3}

	node1.Next = node2
	node2.Next = node3

	// –°–æ–∑–¥–∞—ë–º —É–∫–∞–∑–∞—Ç–µ–ª—å curr
	curr := node1

	fmt.Println("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π vs –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ===")
	fmt.Printf("–ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–≥–¥–µ –æ–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è): %p\n", &curr)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–Ω–∞ —á—Ç–æ –æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç): %p\n", curr)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∑–ª–µ: %d\n", curr.Val)
	fmt.Println()

	fmt.Println("üî∏ –í—ã–ø–æ–ª–Ω—è–µ–º: curr = curr.Next")
	curr = curr.Next

	fmt.Printf("–ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø!): %p\n", &curr)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–ò–ó–ú–ï–ù–ò–õ–û–°–¨!): %p\n", curr)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∑–ª–µ: %d\n", curr.Val)
	fmt.Println()

	fmt.Println("üî∏ –ï—â—ë —Ä–∞–∑: curr = curr.Next")
	curr = curr.Next

	fmt.Printf("–ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–û–ü–Ø–¢–¨ –ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø!): %p\n", &curr)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–û–ü–Ø–¢–¨ –ò–ó–ú–ï–ù–ò–õ–û–°–¨!): %p\n", curr)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∑–ª–µ: %d\n", curr.Val)

	fmt.Println("\nüí° –í–´–í–û–î:")
	fmt.Println("‚úÖ –ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ")
	fmt.Println("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr (–∫—É–¥–∞ –æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç) –º–µ–Ω—è–µ—Ç—Å—è")
	fmt.Println("‚úÖ –°–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –ø–∞–º—è—Ç–∏ –ù–ï –¢–†–û–ì–ê–Æ–¢–°–Ø!")
}

func demonstrateInAlgorithm() {
	fmt.Println("\n=== –í –ö–û–ù–¢–ï–ö–°–¢–ï –ê–õ–ì–û–†–ò–¢–ú–ê ===")

	dummyHead := &ListNode{Val: 0}
	curr := dummyHead

	fmt.Printf("üéØ –ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π dummyHead: %p\n", &dummyHead)
	fmt.Printf("üéØ –ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π curr: %p\n", &curr)
	fmt.Printf("üìç –ó–Ω–∞—á–µ–Ω–∏–µ dummyHead (–æ–±—ä–µ–∫—Ç): %p\n", dummyHead)
	fmt.Printf("üìç –ó–Ω–∞—á–µ–Ω–∏–µ curr (–æ–±—ä–µ–∫—Ç): %p\n", curr)
	fmt.Println()

	// –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π —É–∑–µ–ª
	curr.Next = &ListNode{Val: 7}
	fmt.Println("‚úÖ –°–æ–∑–¥–∞–ª–∏ curr.Next")

	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º curr
	fmt.Println("üî∏ –ü–ï–†–ï–î curr = curr.Next:")
	fmt.Printf("   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è curr –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: %p\n", &curr)
	fmt.Printf("   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è dummyHead –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: %p\n", &dummyHead)
	fmt.Printf("   curr —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç: %p\n", curr)
	fmt.Printf("   dummyHead —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç: %p\n", dummyHead)

	curr = curr.Next

	fmt.Println("üî∏ –ü–û–°–õ–ï curr = curr.Next:")
	fmt.Printf("   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è curr –í–°–Å –ï–©–Å –ø–æ –∞–¥—Ä–µ—Å—É: %p (–ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø!)\n", &curr)
	fmt.Printf("   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è dummyHead –í–°–Å –ï–©–Å –ø–æ –∞–¥—Ä–µ—Å—É: %p (–ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø!)\n", &dummyHead)
	fmt.Printf("   curr –¢–ï–ü–ï–†–¨ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç: %p (–ò–ó–ú–ï–ù–ò–õ–û–°–¨!)\n", curr)
	fmt.Printf("   dummyHead –í–°–Å –ï–©–Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞: %p (–ù–ï –ò–ó–ú–ï–ù–ò–õ–û–°–¨!)\n", dummyHead)

	fmt.Println("\nüß† –ì–õ–ê–í–ù–û–ï –ü–û–ù–ò–ú–ê–ù–ò–ï:")
	fmt.Println("üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ curr –∏ dummyHead –∂–∏–≤—É—Ç –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –ø–∞–º—è—Ç–∏")
	fmt.Println("üîπ –ú—ã –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –ó–ù–ê–ß–ï–ù–ò–Ø (–Ω–∞ –∫–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –æ–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç)")
	fmt.Println("üîπ –û–±—ä–µ–∫—Ç—ã ListNode –æ—Å—Ç–∞—é—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–µ Next")
	fmt.Println("üîπ dummyHead –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –¥–æ–π—Ç–∏ –¥–æ –ª—é–±–æ–≥–æ —É–∑–ª–∞ –ø–æ —Ü–µ–ø–æ—á–∫–µ!")
}

func main() {
	demonstratePointerVsValue()
	demonstrateInAlgorithm()
}
